# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MessageGroupOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  code: String!
  name: String!
  messages: [MessageOutput!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MessageOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Float!
  code: String!
  name: String!
  text: String!
  groupCode: String!
  group: MessageGroupOutput!
}

type MessagesOutput {
  list: [MessageOutput!]!
  total: Int!
}

type MessageGroupsOutput {
  list: [MessageGroupOutput!]!
  total: Int!
}

type RoleGroupOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  parentSeqNo: Int
  roles: [RoleOutput!]!
  children: [RoleGroupOutput!]!
  parent: RoleGroupOutput
}

type IconLabelOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  icons: [IconOutput!]!
}

type IconOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  filePath: String!
  menus: [MenuOutput!]!
  fileFullPath: String!
  labels: [IconLabelOutput!]!
}

type RoleFrontComponentMapOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  roleSeqNo: Int!
  frontComponentId: String!
  allFrontComponentId: String!
  role: RoleOutput!
  frontComponent: FrontComponentOutput!
  allFrontComponent: AllFrontComponentOutput!
}

type AllFrontComponentOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  frontComponentId: String
  frontComponent: FrontComponentOutput
}

type FrontComponentOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  name: String!
  allFrontComponent: AllFrontComponentOutput
  allFrontComponentByRole(roleSeqNo: Int!): AllFrontComponentOutput
  allFrontComponents: [AllFrontComponentOutput!]!
  roles: [RoleOutput!]!
  routes: [RouteOutput!]!
}

type RouteOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  path: String!
  frontComponentId: String
  parentSeqNo: Int
  children: [RouteOutput!]!
  roles: [RoleOutput!]!
  treeInfo: RouteTreeOutput!
}

type MenuOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  iconSeqNo: Int
  routeSeqNo: Int
  roles: [RoleOutput!]!
  icon: IconOutput
  route: RouteOutput
  children: [MenuOutput!]!
}

type MenuRoleMapOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  menuSeqNo: Int!
  roleSeqNo: Int!
  parentSeqNo: Int
  orderNo: Int!
  menu: MenuOutput!
  role: RoleOutput!
  parent: MenuRoleMapOutput
}

type RoleOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  identifier: String
  roleGroupSeqNo: Int!
  roleGroup: RoleGroupOutput
  users: [UserOutput!]!
  menus: [MenuOutput!]!
  routes: [RouteOutput!]!
  frontComponents: [FrontComponentOutput!]!
}

type UserOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  roleSeqNo: Int!
  role: RoleOutput!
}

type RolesOutput {
  list: [RoleOutput!]!
  total: Int!
}

type RoleGroupsOutput {
  list: [RoleGroupOutput!]!
  total: Int!
}

type AllFrontComponentsOutput {
  list: [AllFrontComponentOutput!]!
  total: Int!
}

type FrontComponentsOutput {
  list: [FrontComponentOutput!]!
  total: Int!
}

type CodeOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  parents: [CodeOutput!]!
  children: [CodeOutput!]!
}

type CodesOutput {
  list: [CodeOutput!]!
  total: Int!
}

type RoutesOutput {
  list: [RouteOutput!]!
  total: Int!
}

type RouteTreeOutput {
  fullPath: String!
  depth: Int!
}

type IconsOutput {
  list: [IconOutput!]!
  total: Int!
}

type MenusOutput {
  list: [MenuOutput!]!
  total: Int!
}

type MenuRoleMapsOutput {
  list: [MenuRoleMapOutput!]!
  total: Int!
}

type IconLabelsOutput {
  list: [IconLabelOutput!]!
  total: Int!
}

type Query {
  authCheck: Boolean!
  user(id: String!): UserOutput!
  code(seqNo: Int!): CodeOutput!
  codes(pagingInput: PagingInput, codesInput: CodesInput): CodesOutput!
  menu(seqNo: Int!): MenuOutput!
  menus(pagingInput: PagingInput, menusInput: MenusInput): MenusOutput!
  menuRoleMap(seqNo: Int!): MenuRoleMapOutput!
  menuRoleMaps(pagingInput: PagingInput, menuByAuthsInput: MenuRoleMapsInput): MenuRoleMapsOutput!
  route(seqNo: Int!): RouteOutput!
  routes(paging: PagingInput = null, request: RoutesInput): RoutesOutput!
  messageBySeqNo(seqNo: Int!): MessageOutput!
  messageByCode(groupCode: String!, code: String!): MessageOutput!
  messages(pagingInput: PagingInput, messagesInput: MessagesInput): MessagesOutput!
  messageGroup(code: String!): MessageGroupOutput!
  messageGroups(pagingInput: PagingInput, messageGroupsInput: MessageGroupsInput): MessageGroupsOutput!
  frontComponents(pagingInput: PagingInput, frontComponentsInput: FrontComponentsInput): FrontComponentsOutput!
  frontComponentById(frontComponentId: String!): FrontComponentOutput!
  allFrontComponentById(allFrontComponentId: String!): AllFrontComponentOutput!
  allFrontComponentByIdAndRole(frontComponentId: String!, roleSeqNo: Int!): AllFrontComponentOutput
  allFrontComponents(pagingInput: PagingInput, allFrontComponentsInput: AllFrontComponentsInput): AllFrontComponentsOutput!
  allFrontComponentByFcId(frontComponentId: String!): AllFrontComponentOutput
  role(seqNo: Int!): RoleOutput
  roles(pagingInput: PagingInput, rolesInput: RolesInput): RolesOutput!
  roleGroups(pagingInput: PagingInput, roleGroupsInput: RoleGroupsInput): RoleGroupsOutput!
  roleFrontComponentMap(roleSeqNo: Int!, frontComponentId: String!): RoleFrontComponentMapOutput
  icon(seqNo: Int!): IconOutput!
  icons(pagingInput: PagingInput, iconsInput: IconsInput): IconsOutput!
  iconLabel(iconLabelSeqNo: Int!): IconLabelOutput!
  iconLabels(pagingInput: PagingInput, iconLabelsInput: IconLabelsInput): IconLabelsOutput!
  iconLabelByIconSeqNo(iconSeqNo: Int!): [IconLabelOutput!]!
}

input PagingInput {
  skip: Int!
  take: Int!
}

input CodesInput {
  search: CodesSearchInput
  sort: CodesSortInput
}

input CodesSearchInput {
  seqNo: NonNullableNumberSearchInput
  name: NonNullableStringSearchInput
}

input NonNullableNumberSearchInput {
  equal: EqualNumberSearchInput
  any: NonNullableAnyNumberSearchInput
  in: NonNullableInNumberSearchInput
  lessThan: LessThanNumberSearchInput
  moreThan: MoreThanNumberSearchInput
  between: BetweenNumberSearchInput
}

input EqualNumberSearchInput {
  value: Int!
  not: Boolean = false
}

input NonNullableAnyNumberSearchInput {
  value: [Int!]!
  not: Boolean = false
}

input NonNullableInNumberSearchInput {
  value: [Int!]!
  not: Boolean = false
}

input LessThanNumberSearchInput {
  value: Int!
  not: Boolean = false
}

input MoreThanNumberSearchInput {
  value: Int!
  not: Boolean = false
}

input BetweenNumberSearchInput {
  from: Int!
  to: Int!
  not: Boolean = false
}

input NonNullableStringSearchInput {
  regex: RegexStringSearchInput
  like: LikeStringSearchInput
  equal: EqualStringSearchInput
  ilike: IlikeStringSearchInput
  any: NonNullableAnyStringSearchInput
  in: NonNullableInStringSearchInput
}

input RegexStringSearchInput {
  value: String!
  not: Boolean = false
}

input LikeStringSearchInput {
  value: String!
  not: Boolean = false
}

input EqualStringSearchInput {
  value: String!
  not: Boolean = false
}

input IlikeStringSearchInput {
  value: String!
  not: Boolean = false
}

input NonNullableAnyStringSearchInput {
  value: [String!]!
  not: Boolean = false
}

input NonNullableInStringSearchInput {
  value: [String!]!
  not: Boolean = false
}

input CodesSortInput {
  seqNo: SortTypeInput
  name: SortTypeInput
}

input SortTypeInput {
  sort: SortEnum!
  order: Int!
}

enum SortEnum {
  ASC
  DESC
}

input MenusInput {
  search: MenusSearchInput
  sort: MenusSortInput
}

input MenusSearchInput {
  seqNo: NonNullableNumberSearchInput
  name: NonNullableStringSearchInput
  iconSeqNo: NullableNumberSearchInput
  routeSeqNo: NullableNumberSearchInput
  role: RoleSearchInput
}

input NullableNumberSearchInput {
  equal: EqualNumberSearchInput
  any: NullableAnyNumberSearchInput
  in: NullableInNumberSearchInput
  isNull: IsNullNumberSearchInput
  lessThan: LessThanNumberSearchInput
  moreThan: MoreThanNumberSearchInput
  between: BetweenNumberSearchInput
}

input NullableAnyNumberSearchInput {
  value: [Int]!
  not: Boolean = false
}

input NullableInNumberSearchInput {
  value: [Int]!
  not: Boolean = false
}

input IsNullNumberSearchInput {
  value: Boolean!
}

input RoleSearchInput {
  parentSeqNo: NullableNumberSearchInput
  orderNo: NonNullableNumberSearchInput
}

input MenusSortInput {
  seqNo: SortTypeInput
  name: SortTypeInput
  iconSeqNo: SortTypeInput
  routeSeqNo: SortTypeInput
}

input MenuRoleMapsInput {
  search: MenuRoleMapsSearchInput
  sort: MenuRoleMapsSortInput
}

input MenuRoleMapsSearchInput {
  seqNo: NonNullableNumberSearchInput
  roleSeqNo: NonNullableNumberSearchInput
  menuSeqNo: NonNullableNumberSearchInput
  orderNo: NonNullableNumberSearchInput
  parentSeqNo: NullableNumberSearchInput
  menu: MenusSearchInput
}

input MenuRoleMapsSortInput {
  seqNo: SortTypeInput
  menuSeqNo: SortTypeInput
  roleSeqNo: SortTypeInput
  menu: MenusSortInput
}

input RoutesInput {
  search: RoutesSearchInput
  sort: RoutesSortInput
}

input RoutesSearchInput {
  path: NonNullableStringSearchInput
  frontComponentId: NonNullableStringSearchInput
  parentSeqNo: NullableNumberSearchInput
}

input RoutesSortInput {
  seqNo: SortEnum
  code: SortEnum
  name: SortEnum
  text: SortEnum
  groupCode: SortEnum
}

input MessagesInput {
  search: MessagesSearchInput
  sort: MessagesSortInput
}

input MessagesSearchInput {
  seqNo: NonNullableNumberSearchInput
  name: NonNullableStringSearchInput
  text: NonNullableStringSearchInput
  groupCode: NonNullableStringSearchInput
}

input MessagesSortInput {
  seqNo: SortTypeInput
  code: SortTypeInput
  name: SortTypeInput
  text: SortTypeInput
  groupCode: SortTypeInput
  desc: SortTypeInput
  createdAt: SortTypeInput
  updatedAt: SortTypeInput
}

input MessageGroupsInput {
  search: MessageGroupsSearchInput
  sort: MessageGroupsSortInput
}

input MessageGroupsSearchInput {
  code: NonNullableStringSearchInput
  name: NonNullableStringSearchInput
}

input MessageGroupsSortInput {
  code: SortTypeInput
  name: SortTypeInput
  desc: SortTypeInput
  createdAt: SortTypeInput
  updatedAt: SortTypeInput
}

input FrontComponentsInput {
  search: FrontComponentsSearchInput
  sort: FrontComponentsSortInput
}

input FrontComponentsSearchInput {
  id: NonNullableStringSearchInput
  name: NonNullableStringSearchInput
}

input FrontComponentsSortInput {
  id: SortTypeInput
  name: SortTypeInput
  desc: SortTypeInput
  createdAt: SortTypeInput
  updatedAt: SortTypeInput
}

input AllFrontComponentsInput {
  search: AllFrontComponentsSearchInput
  sort: AllFrontComponentsSortInput
}

input AllFrontComponentsSearchInput {
  id: NonNullableStringSearchInput
  frontComponentId: NullableStringSearchInput
}

input NullableStringSearchInput {
  regex: RegexStringSearchInput
  like: LikeStringSearchInput
  equal: EqualStringSearchInput
  ilike: IlikeStringSearchInput
  any: NullableAnyStringSearchInput
  in: NullableInStringSearchInput
  isNull: IsNullStringSearchInput
}

input NullableAnyStringSearchInput {
  value: [String]!
  not: Boolean = false
}

input NullableInStringSearchInput {
  value: [String]!
  not: Boolean = false
}

input IsNullStringSearchInput {
  value: Boolean!
}

input AllFrontComponentsSortInput {
  id: SortTypeInput
  frontComponentId: SortTypeInput
  desc: SortTypeInput
  createdAt: SortTypeInput
  updatedAt: SortTypeInput
}

input RolesInput {
  search: RolesSearchInput
  sort: RolesSortInput
}

input RolesSearchInput {
  seqNo: NonNullableNumberSearchInput
  name: NonNullableStringSearchInput
  identifier: NullableStringSearchInput
  roleGroupSeqNo: NullableNumberSearchInput
}

input RolesSortInput {
  seqNo: SortTypeInput
  name: SortTypeInput
  identifier: SortTypeInput
  roleGroupSeqNo: SortTypeInput
  desc: SortTypeInput
  createdAt: SortTypeInput
  updatedAt: SortTypeInput
}

input RoleGroupsInput {
  search: RoleGroupsSearchInput
  sort: RoleGroupsSortInput
}

input RoleGroupsSearchInput {
  seqNo: NonNullableNumberSearchInput
  name: NonNullableStringSearchInput
  parentSeqNo: NullableNumberSearchInput
}

input RoleGroupsSortInput {
  seqNo: SortTypeInput
  name: SortTypeInput
  parentSeqNo: SortTypeInput
  desc: SortTypeInput
  createdAt: SortTypeInput
  updatedAt: SortTypeInput
}

input IconsInput {
  search: IconsSearchInput
  sort: IconsSortInput
}

input IconsSearchInput {
  seqNo: NonNullableNumberSearchInput
  name: NonNullableStringSearchInput
  filePath: NonNullableStringSearchInput
  iconLabel: IconLabelsSearchInput
}

input IconLabelsSearchInput {
  seqNo: NonNullableNumberSearchInput
  name: NonNullableStringSearchInput
}

input IconsSortInput {
  seqNo: SortTypeInput
  name: SortTypeInput
  filePath: SortTypeInput
}

input IconLabelsInput {
  search: IconLabelsSearchInput
  sort: IconLabelsSortInput
}

input IconLabelsSortInput {
  seqNo: SortTypeInput
  name: SortTypeInput
}

type Mutation {
  insertCode(insertCodeInput: InsertCodeInput!): CodeOutput!
  updateCode(updateCodeInput: UpdateCodeInput!): CodeOutput!
  insertMenu(insertMenuInput: InsertMenuInput!): MenuOutput!
  updateMenu(updateMenuInput: UpdateMenuInput!): MenuOutput!
  updateMessage(updateMessageInput: UpdateMessageInput!): MessageOutput!
  insertMessage(insertMessageInput: InsertMessageInput!): MessageOutput!
  deleteMessages(seqNos: [Int!]!): Boolean!
  deleteMessage(seqNo: Int!): Boolean!
  chkUniqMessageByCode(input: ChkUniqMessageByCodeInput!): Boolean!
  updateMessageGroup(updateMessageGroupInput: UpdateMessageGroupInput!): MessageGroupOutput
  insertMessageGroup(insertMessageGroupInput: InsertMessageGroupInput!): MessageGroupOutput!
  enableMessageGroupOfCode(code: String!): Boolean!
  insertFrontComponent(insertFrontComponentInput: InsertFrontComponentInput!): FrontComponentOutput!
  updateFrontComponent(updateFrontComponentInput: UpdateFrontComponentInput!): FrontComponentOutput!
  insertAllFrontComponent(insertAllFrontComponentInput: InsertAllFrontComponentInput!): AllFrontComponentOutput!
  updateAllFrontComponent(updateAllFrontComponentInput: UpdateAllFrontComponentInput!): AllFrontComponentOutput!
  chkUniqByAllFcId(input: ChkUniqByAllFcIdInput!): Boolean!
  insertRole(insertRoleInput: InsertRoleInput!): RoleOutput!
  updateRole(updateRoleInput: UpdateRoleInput!): RoleOutput!
  insertRoleGroup(insertRoleGroupInput: InsertRoleGroupInput!): RoleGroupOutput!
  updateRoleGroup(updateRoleGroupInput: UpdateRoleGroupInput!): RoleGroupOutput!
  removeRoleGroup(seqNo: Int!): RoleGroupOutput!
  updateAllFrontComponentByRoleFrontComponentMap(roleSeqNo: Int!, frontComponentId: String!, allFrontComponentId: String!): RoleFrontComponentMapOutput!
}

input InsertCodeInput {
  desc: String
  name: String!
}

input UpdateCodeInput {
  seqNo: Int!
  desc: String
  name: String
}

input InsertMenuInput {
  desc: String
  name: String!
  iconSeqNo: Int
  routeSeqNo: Int
}

input UpdateMenuInput {
  seqNo: Int!
  desc: String
  name: String!
  iconSeqNo: Int
  routeSeqNo: Int
}

input UpdateMessageInput {
  seqNo: Float!
  desc: String
  code: String
  name: String
  text: String
  groupCode: String
}

input InsertMessageInput {
  desc: String
  code: String!
  name: String!
  text: String!
  groupCode: String!
}

input ChkUniqMessageByCodeInput {
  code: String!
  groupCode: String!
}

input UpdateMessageGroupInput {
  desc: String
  code: String!
  name: String!
}

input InsertMessageGroupInput {
  desc: String
  code: String!
  name: String!
}

input InsertFrontComponentInput {
  desc: String
  id: String!
  name: String!
  allFrontComponentIds: [String!]
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input UpdateFrontComponentInput {
  desc: String
  id: String!
  name: String!
  allFrontComponentIds: [String!]
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input InsertAllFrontComponentInput {
  desc: String
  id: String!
  frontComponentId: String
}

input UpdateAllFrontComponentInput {
  desc: String
  id: String!
  frontComponentId: String
}

input ChkUniqByAllFcIdInput {
  id: String!
}

input InsertRoleInput {
  name: String!
  identifier: String
  roleGroupSeqNo: Int!
  userIds: String
  menuSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input UpdateRoleInput {
  seqNo: Int!
  name: String
  roleGroupSeqNo: Int
  userIds: String
  menuSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input InsertRoleGroupInput {
  name: String!
  parentSeqNo: Int
  roleSeqNos: [Int!]
  childSeqNos: [Int!]
}

input UpdateRoleGroupInput {
  seqNo: Int!
  name: String
  parentSeqNo: Int
  roleSeqNos: [Int!]
  childSeqNos: [Int!]
}