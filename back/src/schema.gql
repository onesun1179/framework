# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type GqlCodeMap {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  childSeqNo: Int!
  parentSeqNo: Int!
  child: GqlCode!
  parent: GqlCode!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GqlCode {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  children: [GqlCodeMap!]
  parents: [GqlCodeMap!]
}

type GqlRoleGroup {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  parentSeqNo: Int
  roles: [GqlRole!]!
  children: [GqlRoleGroup!]!
  parent: GqlRoleGroup
}

type GqlMenuRoleMap {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  menuSeqNo: Int!
  roleSeqNo: Int!
  role: GqlRole!
  orderNo: Int!
}

type GqlIconGroup {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
}

type GqlIcon {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  filePath: String!
  menus: [GqlMenu!]!
}

type GqlMenu {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  iconSeqNo: Int
  routeSeqNo: Int
  roles: [GqlRole!]!
  icon: GqlIcon
  children: [GqlMenu!]!
  route: GqlRoute
}

type GqlAllFrontComponent {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  frontComponentId: String
  frontComponent: GqlFrontComponent
}

type GqlRoleFrontComponentMap {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  roleSeqNo: Int!
  frontComponentId: String!
  allFrontComponentId: String!
  role: GqlRole!
  frontComponent: GqlFrontComponent!
  allFrontComponent: GqlAllFrontComponent!
}

type GqlFrontComponent {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  allFrontComponent: GqlAllFrontComponent
  allFrontComponents: [GqlAllFrontComponent!]!
  roles: [GqlRole!]!
  routes: [GqlRoute!]!
}

type GqlRoute {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  path: String!
  frontComponentId: String
  parentSeqNo: Int
  children: [GqlRoute!]!
  roles: [GqlRole!]!
  routeTree: GqlRouteTree!
}

type GqlRole {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  identifier: String
  roleGroupSeqNo: Int
  roleGroup: GqlRoleGroup
  users: [GqlUser!]!
  menus: [GqlMenu!]!
  routes: [GqlRoute!]!
  frontComponents: [GqlFrontComponent!]!
}

type GqlUser {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  roleSeqNo: Int!
  role: GqlRole!
}

type GqlMessageGroup {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  code: String!
  name: String!
  messages: [GqlMessage!]!
}

type GqlMessage {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Float!
  code: String!
  name: String!
  text: String!
  groupCode: String
  group: GqlMessageGroup!
}

type GqlPagedMessages {
  list: [GqlMessage!]!
  total: Int!
}

type GqlRouteTree {
  fullPath: String!
  depth: Int!
}

type GqlPagedRoutes {
  list: [GqlRoute!]!
  total: Int!
}

type GqlPagedMessageGroups {
  list: [GqlMessageGroup!]!
  total: Int!
}

type Query {
  authCheck: Boolean!
  user(id: String!): GqlUser!
  role(seqNo: Int!): GqlRoleGroup
  roleFrontComponentMap(roleSeqNo: Int!, frontComponentId: String!): GqlRoleFrontComponentMap
  message(seqNo: Int!): GqlMenu!
  rootMenus: [GqlMenu!]!
  routeBySeqNo(seqNo: Int!): GqlRoute!
  routes(paging: PagingInput, request: RoutesInput): GqlPagedRoutes!
  messageBySeqNo(seqNo: Int!): GqlMessage!
  messageByCode(groupCode: String!, code: String!): GqlMessage!
  messages(paging: PagingInput, request: MessagesInput): GqlPagedMessages!
  messageGroup(code: String!): GqlMessageGroup!
  messageGroups(paging: PagingInput, request: MessageGroupsInput): GqlPagedMessageGroups!
  frontComponent(id: String!): GqlFrontComponent
  allFrontComponent(id: String!): GqlAllFrontComponent
  icon(seqNo: Int!): GqlIcon!
}

input PagingInput {
  skip: Int
  take: Int
}

input RoutesInput {
  search: RoutesSearchInput
  sort: RoutesSortInput
}

input RoutesSearchInput {
  path: NumberSearchInput
  frontComponentId: StringSearchInput
  rootYn: Boolean = false
}

input NumberSearchInput {
  equal: EqualNumberSearchInput
  any: AnyNumberSearchInput
  in: InNumberSearchInput
  isNull: Boolean
  lessThan: Int
  lessThanOrEqual: Int
  moreThan: Int
  moreThanOrEqual: Int
  between: BetweenNumberSearchInput
}

input EqualNumberSearchInput {
  value: Int!
  not: Boolean = false
}

input AnyNumberSearchInput {
  value: [Int]!
  not: Boolean = false
}

input InNumberSearchInput {
  value: [Int]!
  not: Boolean = false
}

input BetweenNumberSearchInput {
  from: Int!
  to: Int!
}

input StringSearchInput {
  regex: RegexStringSearchInput = null
  like: LikeStringSearchInput = null
  equal: EqualStringSearchInput = null
  ilike: IlikeStringSearchInput = null
  any: AnyStringSearchInput = null
  in: InStringSearchInput = null
  isNull: Boolean = null
}

input RegexStringSearchInput {
  value: String!
  not: Boolean = false
}

input LikeStringSearchInput {
  value: String!
  not: Boolean = false
}

input EqualStringSearchInput {
  value: String!
  not: Boolean = false
}

input IlikeStringSearchInput {
  value: String!
  not: Boolean = false
}

input AnyStringSearchInput {
  value: [String]!
  not: Boolean = false
}

input InStringSearchInput {
  value: [String]!
  not: Boolean = false
}

input RoutesSortInput {
  seqNo: Sort
  code: Sort
  name: Sort
  text: Sort
  groupCode: Sort
}

enum Sort {
  ASC
  DESC
}

input MessagesInput {
  search: MessagesSearchInput
  sort: MessagesSortInput
}

input MessagesSearchInput {
  seqNo: NumberSearchInput
  groupsInput: MessageGroupsInput
  text: StringSearchInput
}

input MessageGroupsInput {
  code: String
  codes: [String!]
  name: String
}

input MessagesSortInput {
  seqNo: Sort
  code: Sort
  name: Sort
  text: Sort
  groupCode: Sort
}

type Mutation {
  insertRole(insertRoleInput: InsertRoleInput!): GqlRole!
  updateRole(updateRoleInput: UpdateRoleInput!): GqlRole!
  insertRoleGroup(insertRoleGroupInput: InsertRoleGroupInput!): GqlRoleGroup!
  updateRoleGroup(updateRoleGroupInput: UpdateRoleGroupInput!): GqlRoleGroup!
  removeRoleGroup(seqNo: Int!): GqlRoleGroup!
  insertRoute(req: InsertRouteInput!): GqlRoute!
  updateMessage(updateMessageInput: UpdateMessageInput!): GqlMessage!
  insertMessage(insertMessageInput: InsertMessageInput!): GqlMessage!
  deleteMessages(seqNos: [Int!]!): Boolean!
  updateMessageGroup(updateMessageGroupInput: UpdateMessageGroupInput!): GqlMessageGroup
  insertMessageGroup(insertMessageGroupInput: InsertMessageGroupInput!): GqlMessageGroup!
  insertFrontComponent(insertFrontComponentInput: InsertFrontComponentInput!): GqlFrontComponent!
  updateFrontComponent(updateFrontComponentInput: UpdateFrontComponentInput!): GqlFrontComponent!
  insertAllFrontComponent(insertAllFrontComponentInput: InsertAllFrontComponentInput!): GqlAllFrontComponent!
  updateAllFrontComponent(updateAllFrontComponentInput: UpdateAllFrontComponentInput!): GqlAllFrontComponent!
}

input InsertRoleInput {
  name: String!
  identifier: String
  roleGroupSeqNo: Int
  userIds: String
  menuSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input UpdateRoleInput {
  seqNo: Int!
  name: String
  roleGroupSeqNo: Int
  userIds: String
  menuSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input InsertRoleGroupInput {
  name: String!
  parentSeqNo: Int
  roleSeqNos: [Int!]
  childSeqNos: [Int!]
}

input UpdateRoleGroupInput {
  seqNo: Int!
  name: String
  parentSeqNo: Int
  roleSeqNos: [Int!]
  childSeqNos: [Int!]
}

input InsertRouteInput {
  path: String!
  frontComponentId: String
  parentSeqNo: Int
  childSeqNos: [Int!]
  roleSeqNos: [Int!]
  menuSeqNos: [Int!]
}

input UpdateMessageInput {
  seqNo: Float!
  code: String
  name: String
  text: String
  groupCode: String
}

input InsertMessageInput {
  code: String!
  name: String!
  text: String!
  groupCode: String
}

input UpdateMessageGroupInput {
  code: String!
  name: String
  messageSeqNos: [Int!]
}

input InsertMessageGroupInput {
  code: String!
  name: String!
  messageSeqNos: [Int!]
}

input InsertFrontComponentInput {
  id: String!
  allFrontComponentIds: [String!]
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input UpdateFrontComponentInput {
  id: String
  allFrontComponentIds: [String!]
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input InsertAllFrontComponentInput {
  id: String!
  frontComponentId: String
}

input UpdateAllFrontComponentInput {
  id: String!
  frontComponentId: String
}