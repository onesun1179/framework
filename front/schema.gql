# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CodeTree {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  childSeqNo: Int!
  parentSeqNo: Int!
  child: Code!
  parent: Code!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Code {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  children: [CodeTree!]!
  parents: [CodeTree!]!
}

type RoleGroup {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  parentSeqNo: Int
  roles: [Role!]!
  children: [RoleGroup!]!
  parent: RoleGroup
}

type FrontComponentType {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  frontComponents: [FrontComponent!]!
}

type RoleFrontComponentMap {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  roleSeqNo: Int!
  frontComponentId: String!
  role: Role!
  frontComponent: FrontComponent!
  allFrontComponent: AllFrontComponent!
}

type AllFrontComponent {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  frontComponentId: String
  frontComponent: FrontComponent!
}

type FrontComponent {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  frontComponentTypeSeqNo: Int!
  initialFrontComponentId: String!
  allFrontComponentByCurrentUser: AllFrontComponent
  frontComponentType: FrontComponentType!
  allFrontComponents: [AllFrontComponent!]!
  initialFrontComponent: AllFrontComponent!
  roles: [Role!]!
  routes: [Route!]!
}

type MenuRoleMap {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  menuSeqNo: Int!
  roleSeqNo: Int!
  menu: Menu!
  role: Role!
  orderNo: Int!
}

type IconGroupTree {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  childSeqNo: Int!
  parentSeqNo: Int!
  child: IconGroup!
  parent: IconGroup!
}

type IconGroup {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  children: [IconGroupTree!]!
  parents: [IconGroupTree!]!
}

type Icon {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  filePath: String!
  menus: [Menu!]!
}

type Menu {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  iconSeqNo: Int
  roles: [Role!]!
  icon: Icon
  children: [Menu!]!
  route: Route
}

type Route {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  path: String!
  frontComponentId: String
  parentSeqNo: Int
  frontComponent: FrontComponent
  children: [Route!]!
  parent: Route!
  roles: [Role!]!
  routeTree: RouteTree!
}

type Role {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  identifier: String
  roleGroupSeqNo: Int
  roleGroup: RoleGroup!
  users: [User!]!
  menus: [Menu!]!
  routes: [Route!]!
  frontComponents: [FrontComponent!]!
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  roleSeqNo: Int!
  role: Role!
}

type Menus {
  list: [Menu!]
  total: Int
}

type RouteTree {
  fullPath: String!
  depth: Int!
}

type MessageGroup {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: String!
  name: String!
  messages: [Message!]!
}

type Message {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  text: String!
  messageGroupCode: String!
  messageGroup: MessageGroup!
}

type AppMetadata {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  name: String!
  value: String!
}

type Query {
  authCheck: Boolean!
  user(id: String!): User!
  role(seqNo: Int!): RoleGroup
  roleFrontComponentMap(roleSeqNo: Int!, frontComponentId: String!): RoleFrontComponentMap
  message(seqNo: Int!): Message!
  menus(paging: PagingRequest!, param: MenusRequest): Menus!
  rootMenus: [Menu!]!
  route(seqNo: Int!): Route!
  routes(rootYn: Boolean! = false): [Route!]!
  messageGroup(code: String!): MessageGroup!
  appMetaData(name: String!): AppMetadata!
  frontComponent(id: String!): FrontComponent
  frontComponentType(seqNo: Int!): FrontComponent
  allFrontComponent(id: String!): AllFrontComponent
  allFrontComponentByCurrentUserAndFrontComponentId(frontComponentId: String!): AllFrontComponent
  icon(seqNo: Int!): Icon!
}

input PagingRequest {
  skip: Int!
  take: Int!
}

input MenusRequest {
  """메뉴 명 (LIKE 검색)"""
  name: String

  """라우트 보유 여부"""
  haveRouteYn: Boolean
}

type Mutation {
  insertRole(role: InsertRoleRequest!): Role
  saveRoleGroup(SaveRoleGroupRequest: SaveRoleGroupRequest!): RoleGroup!
  removeRoleGroup(seqNo: Int!): RoleGroup!
  insertRoute(insertRouteRequest: InsertRouteRequest!): Route!
  updateRoute(updateRouteRequest: UpdateRouteRequest!): Route!
  updateMessage(UpdateMessageRequest: UpdateMessageRequest!): Message!
  insertMessage(InsertMessageRequest: InsertMessageRequest!): Message!
  updateMessageGroup(UpdateMessageGroupRequest: UpdateMessageGroupRequest!): MessageGroup!
  insertMessageGroup(InsertMessageGroupRequest: InsertMessageGroupRequest!): MessageGroup!
  insertFrontComponent(insertFrontComponentRequest: InsertFrontComponentRequest!): FrontComponent!
  updateFrontComponent(updateFrontComponentRequest: UpdateFrontComponentRequest!): FrontComponent!
  insertFrontComponentType(insertFrontComponentTypeRequest: InsertFrontComponentTypeRequest!): FrontComponentType!
  updateFrontComponentType(updateFrontComponentTypeRequest: UpdateFrontComponentTypeRequest!): FrontComponentType!
  insertAllFrontComponent(insertAllFrontComponentRequest: InsertAllFrontComponentRequest!): AllFrontComponent!
  updateAllFrontComponent(updateAllFrontComponentRequest: UpdateAllFrontComponentRequest!): AllFrontComponent!
}

input InsertRoleRequest {
  name: String!
  roleGroupSeqNo: Int
  userIds: String
  menuSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input SaveRoleGroupRequest {
  name: String!
  parentSeqNo: Int
  seqNo: Int
  roleSeqNos: [Int!] = []
  childSeqNos: [Int!] = []
}

input InsertRouteRequest {
  path: String!
  frontComponentId: String
  parentSeqNo: Int
  childSeqNos: [Int!]
  roleSeqNos: [Int!]
}

input UpdateRouteRequest {
  seqNo: Int!
  parentSeqNo: Int
  path: String
  frontComponentId: String
  childSeqNos: [Int!]
  roleSeqNos: [Int!]
}

input UpdateMessageRequest {
  seqNo: Int!
  text: String
  messageGroupCode: String
}

input InsertMessageRequest {
  text: String!
  messageGroupCode: String!
}

input UpdateMessageGroupRequest {
  seqNo: String!
  name: String!
  messageSeqNos: [Int!] = []
}

input InsertMessageGroupRequest {
  name: String!
  messageSeqNos: [Int!] = []
}

input InsertFrontComponentRequest {
  id: String!
  frontComponentTypeSeqNo: Int!
  initialFrontComponentId: String!
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input UpdateFrontComponentRequest {
  id: String!
  frontComponentTypeSeqNo: Int
  initialFrontComponentId: String
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input InsertFrontComponentTypeRequest {
  name: String!
  frontComponentIds: [String!] = null
}

input UpdateFrontComponentTypeRequest {
  seqNo: Int!
  name: String
  frontComponentIds: [String!] = null
}

input InsertAllFrontComponentRequest {
  id: String!
  frontComponentId: String
}

input UpdateAllFrontComponentRequest {
  id: String!
  frontComponentId: String
}