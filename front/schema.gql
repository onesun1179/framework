# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MessageGroupEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  code: String!
  name: String!
  messages: [MessageEntity!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MessageEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Float!
  code: String!
  name: String!
  text: String!
  groupCode: String
  group: MessageGroupEntity!
}

type MessagesOutput {
  list: [MessageEntity!]!
  total: Int!
}

type RoleGroupEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  parentSeqNo: Int
  roles: [RoleEntity!]!
  children: [RoleGroupEntity!]!
  parent: RoleGroupEntity
}

type IconEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  filePath: String!
  menus: [MenuEntity!]!
}

type RoleFrontComponentMapEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  roleSeqNo: Int!
  frontComponentId: String!
  allFrontComponentId: String!
  role: RoleEntity!
  frontComponent: FrontComponentEntity!
  allFrontComponent: AllFrontComponentEntity!
}

type AllFrontComponentEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  frontComponentId: String
  frontComponent: FrontComponentEntity
}

type FrontComponentEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  allFrontComponent: AllFrontComponentEntity
  allFrontComponents: [AllFrontComponentEntity!]!
  roles: [RoleEntity!]!
  routes: [RouteEntity!]!
}

type RouteEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  path: String!
  frontComponentId: String
  parentSeqNo: Int
  children: [RouteEntity!]!
  roles: [RoleEntity!]!
  treeInfo: RouteTreeOutput!
}

type MenuEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  iconSeqNo: Int
  routeSeqNo: Int
  roles: [RoleEntity!]!
  icon: IconEntity
  route: RouteEntity
}

type RoleEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  identifier: String
  roleGroupSeqNo: Int
  roleGroup: RoleGroupEntity
  users: [UserEntity!]!
  menus: [MenuEntity!]!
  routes: [RouteEntity!]!
  frontComponents: [FrontComponentEntity!]!
}

type UserEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  roleSeqNo: Int!
  role: RoleEntity!
}

type CodeMapEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  childSeqNo: Int!
  parentSeqNo: Int!
}

type RoutesOutput {
  list: [RouteEntity!]!
  total: Int!
}

type RouteTreeOutput {
  fullPath: String!
  depth: Int!
}

type MenusOutput {
  list: [MenuEntity!]!
  total: Int!
}

type MenuByAuthOutput {
  children: [MenuByAuthOutput!]!
}

type MessageGroupsOutput {
  list: [MessageGroupEntity!]!
  total: Int!
}

type Query {
  authCheck: Boolean!
  user(id: String!): UserEntity!
  role(seqNo: Int!): RoleGroupEntity
  roleFrontComponentMap(roleSeqNo: Int!, frontComponentId: String!): RoleFrontComponentMapEntity
  messageBySeqNo(seqNo: Int!): MessageEntity!
  menus(pagingInput: PagingInput, menusInput: MenusInput): MenusOutput!
  menuByAuth(menuSeqNo: Int!): MenuByAuthOutput!
  routeBySeqNo(seqNo: Int!): RouteEntity!
  routes(paging: PagingInput, request: RoutesInput): RoutesOutput!
  messageByCode(groupCode: String!, code: String!): MessageEntity!
  messages(pagingInput: PagingInput, messagesInput: MessagesInput): MessagesOutput!
  messageGroup(code: String!): MessageGroupEntity!
  messageGroups(paging: PagingInput, request: MessageGroupsInput): MessageGroupsOutput!
  frontComponentById(frontComponentId: String!): FrontComponentEntity!
  allFrontComponentById(allFrontComponentId: String!): AllFrontComponentEntity!
  allFrontComponentByAuth(frontComponentId: String!): AllFrontComponentEntity
  icon(seqNo: Int!): IconEntity!
}

input PagingInput {
  skip: Int
  take: Int
}

input MenusInput {
  search: MenusSearchInput
  sort: MenusSortInput
}

input MenusSearchInput {
  seqNo: NonNullableNumberSearchInput
  name: NonNullableStringSearchInput
  iconSeqNo: NullableNumberSearchInput
  routeSeqNo: NullableNumberSearchInput
}

input NonNullableNumberSearchInput {
  equal: EqualNumberSearchInput
  any: NonNullableAnyNumberSearchInput
  in: NonNullableInNumberSearchInput
  lessThan: Int
  lessThanOrEqual: Int
  moreThan: Int
  moreThanOrEqual: Int
  between: BetweenNumberSearchInput
}

input EqualNumberSearchInput {
  value: Int!
  not: Boolean = false
}

input NonNullableAnyNumberSearchInput {
  value: [Int!]!
  not: Boolean = false
}

input NonNullableInNumberSearchInput {
  value: [Int!]!
  not: Boolean = false
}

input BetweenNumberSearchInput {
  from: Int!
  to: Int!
}

input NonNullableStringSearchInput {
  regex: RegexStringSearchInput = null
  like: LikeStringSearchInput = null
  equal: EqualStringSearchInput = null
  ilike: IlikeStringSearchInput = null
  any: NonNullableAnyStringSearchInput = null
  in: NonNullableInStringSearchInput = null
}

input RegexStringSearchInput {
  value: String!
  not: Boolean = false
}

input LikeStringSearchInput {
  value: String!
  not: Boolean = false
}

input EqualStringSearchInput {
  value: String!
  not: Boolean = false
}

input IlikeStringSearchInput {
  value: String!
  not: Boolean = false
}

input NonNullableAnyStringSearchInput {
  value: [String!]!
  not: Boolean = false
}

input NonNullableInStringSearchInput {
  value: [String!]!
  not: Boolean = false
}

input NullableNumberSearchInput {
  equal: EqualNumberSearchInput
  any: NullableAnyNumberSearchInput
  in: NullableInNumberSearchInput
  isNull: Boolean
  lessThan: Int
  lessThanOrEqual: Int
  moreThan: Int
  moreThanOrEqual: Int
  between: BetweenNumberSearchInput
}

input NullableAnyNumberSearchInput {
  value: [Int]!
  not: Boolean = false
}

input NullableInNumberSearchInput {
  value: [Int]!
  not: Boolean = false
}

input MenusSortInput {
  seqNo: Sort
}

enum Sort {
  ASC
  DESC
}

input RoutesInput {
  search: RoutesSearchInput
  sort: RoutesSortInput
}

input RoutesSearchInput {
  path: NonNullableStringSearchInput
  frontComponentId: NonNullableStringSearchInput
  parentSeqNo: NullableNumberSearchInput
}

input RoutesSortInput {
  seqNo: Sort
  code: Sort
  name: Sort
  text: Sort
  groupCode: Sort
}

input MessagesInput {
  search: MessagesSearchInput
  sort: MessagesSortInput
}

input MessagesSearchInput {
  seqNo: NonNullableNumberSearchInput
  groupsInput: MessageGroupsInput
  text: NonNullableStringSearchInput
}

input MessageGroupsInput {
  code: String
  codes: [String!]
  name: String
}

input MessagesSortInput {
  seqNo: Sort
  code: Sort
  name: Sort
  text: Sort
  groupCode: Sort
}

type Mutation {
  insertRole(insertRoleInput: InsertRoleInput!): RoleEntity!
  updateRole(updateRoleInput: UpdateRoleInput!): RoleEntity!
  insertRoleGroup(insertRoleGroupInput: InsertRoleGroupInput!): RoleGroupEntity!
  updateRoleGroup(updateRoleGroupInput: UpdateRoleGroupInput!): RoleGroupEntity!
  removeRoleGroup(seqNo: Int!): RoleGroupEntity!
  updateMessage(updateMessageInput: UpdateMessageInput!): MessageEntity!
  insertMessage(insertMessageInput: InsertMessageInput!): MessageEntity!
  deleteMessages(seqNos: [Int!]!): Boolean!
  updateMessageGroup(updateMessageGroupInput: UpdateMessageGroupInput!): MessageGroupEntity
  insertMessageGroup(insertMessageGroupInput: InsertMessageGroupInput!): MessageGroupEntity!
  insertFrontComponent(insertFrontComponentInput: InsertFrontComponentInput!): FrontComponentEntity!
  updateFrontComponent(updateFrontComponentInput: UpdateFrontComponentInput!): FrontComponentEntity!
  insertAllFrontComponent(insertAllFrontComponentInput: InsertAllFrontComponentInput!): AllFrontComponentEntity!
  updateAllFrontComponent(updateAllFrontComponentInput: UpdateAllFrontComponentInput!): AllFrontComponentEntity!
}

input InsertRoleInput {
  name: String!
  identifier: String
  roleGroupSeqNo: Int
  userIds: String
  menuSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input UpdateRoleInput {
  seqNo: Int!
  name: String
  roleGroupSeqNo: Int
  userIds: String
  menuSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input InsertRoleGroupInput {
  name: String!
  parentSeqNo: Int
  roleSeqNos: [Int!]
  childSeqNos: [Int!]
}

input UpdateRoleGroupInput {
  seqNo: Int!
  name: String
  parentSeqNo: Int
  roleSeqNos: [Int!]
  childSeqNos: [Int!]
}

input UpdateMessageInput {
  seqNo: Float!
  code: String
  name: String
  text: String
  groupCode: String
}

input InsertMessageInput {
  code: String!
  name: String!
  text: String!
  groupCode: String
}

input UpdateMessageGroupInput {
  code: String!
  name: String
  messageSeqNos: [Int!]
}

input InsertMessageGroupInput {
  code: String!
  name: String!
  messageSeqNos: [Int!]
}

input InsertFrontComponentInput {
  id: String!
  allFrontComponentIds: [String!]
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input UpdateFrontComponentInput {
  id: String
  allFrontComponentIds: [String!]
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input InsertAllFrontComponentInput {
  id: String!
  frontComponentId: String
}

input UpdateAllFrontComponentInput {
  id: String!
  frontComponentId: String
}