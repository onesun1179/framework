# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MessageGroupEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  code: String!
  name: String!
  messageEntities: [MessageEntityOutput!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MessageEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Float!
  code: String!
  name: String!
  text: String!
  groupCode: String!
  sysYn: Boolean!
  group: MessageGroupEntityOutput!
}

type MessageEntitiesOutput {
  list: [MessageEntityOutput!]!
  total: Int!
}

type RoleGroupEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  parentSeqNo: Int
  roles: [RoleEntityOutput!]!
  children: [RoleGroupEntityOutput!]!
  parent: RoleGroupEntityOutput
}

type MenuOutput {
  seqNo: Int!
  name: String!
  iconSeqNo: Int
  routeSeqNo: Int
  menuSeqNo: Int!
  parentSeqNo: Int
  children: [MenuOutput!]!
  icon: IconOutput
  route: RouteOutput
}

type IconOutput {
  seqNo: Int!
  name: String!
  filePath: String!
}

type IconEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  filePath: String!
  menus: [MenuEntityOutput!]!
}

type RoleFrontComponentMapEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  roleSeqNo: Int!
  frontComponentId: String!
  allFrontComponentId: String!
  role: RoleEntityOutput!
  frontComponent: FrontComponentEntityOutput!
  allFrontComponent: AllFrontComponentEntityOutput!
}

type AllFrontComponentEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  frontComponentId: String
  frontComponent: FrontComponentEntityOutput
}

type FrontComponentEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  allFrontComponent: AllFrontComponentEntityOutput
  allFrontComponents: [AllFrontComponentEntityOutput!]!
  roles: [RoleEntityOutput!]!
  routes: [RouteEntityOutput!]!
}

type RouteOutput {
  seqNo: Int!
  path: String!
  frontComponentId: String
  parentSeqNo: Int
  treeInfo: RouteTreeOutput!
}

type RouteEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  path: String!
  frontComponentId: String
  parentSeqNo: Int
  children: [RouteEntityOutput!]!
  roles: [RoleEntityOutput!]!
  treeInfo: RouteTreeOutput!
}

type MenuEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  iconSeqNo: Int
  routeSeqNo: Int
  roleEntities: [RoleEntityOutput!]!
  iconEntity: IconEntityOutput
  routeEntity: RouteEntityOutput
}

type MenuRoleMapEntity {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  menuSeqNo: Int!
  roleSeqNo: Int!
  parentSeqNo: Int
  orderNo: Int!
  menuEntity: MenuEntityOutput!
  roleEntity: RoleEntityOutput!
  parent: MenuRoleMapEntity
}

type RoleEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  seqNo: Int!
  name: String!
  identifier: String
  roleGroupSeqNo: Int
  roleGroup: RoleGroupEntityOutput
  users: [UserEntityOutput!]!
  menus: [MenuEntityOutput!]!
  routes: [RouteEntityOutput!]!
  frontComponents: [FrontComponentEntityOutput!]!
}

type UserEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  id: String!
  roleSeqNo: Int!
  role: RoleEntityOutput!
}

type CodeMapEntityOutput {
  createdAt: DateTime!
  updatedAt: DateTime!
  desc: String
  childSeqNo: Int!
  parentSeqNo: Int!
}

type RouteTreeOutput {
  fullPath: String!
  depth: Int!
}

type RouteEntitiesOutput {
  list: [RouteEntityOutput!]!
  total: Int!
}

type MenuEntitiesOutput {
  list: [MenuEntityOutput!]!
  total: Int!
}

type MenuRoleMapEntitiesOutput {
  list: [MenuRoleMapEntity!]!
  total: Int!
}

type MessageGroupEntitiesOutput {
  list: [MessageGroupEntityOutput!]!
  total: Int!
}

type Query {
  authCheck: Boolean!
  user(id: String!): UserEntityOutput!
  role(seqNo: Int!): RoleGroupEntityOutput
  roleFrontComponentMap(roleSeqNo: Int!, frontComponentId: String!): RoleFrontComponentMapEntityOutput
  menuEntity(seqNo: Int!): MenuEntityOutput!
  menuEntities(pagingInput: PagingInput, menusInput: MenuEntitiesInput): MenuEntitiesOutput!
  menuRoleMapEntity(seqNo: Int!): MenuRoleMapEntity!
  menuRoleMapEntities(pagingInput: PagingInput, menuByAuthsInput: MenuRoleMapEntitiesInput): MenuRoleMapEntitiesOutput!
  menu(seqNo: Int!): MenuOutput!
  menus: [MenuOutput!]!
  route(seqNo: Int!): RouteOutput!
  routeBySeqNo(seqNo: Int!): RouteEntityOutput!
  routes(paging: PagingInput, request: RouteEntitiesInput): RouteEntitiesOutput!
  messageEntityBySeqNo(seqNo: Int!): MessageEntityOutput!
  messageEntityByCode(groupCode: String!, code: String!): MessageEntityOutput!
  messageEntities(pagingInput: PagingInput, messageEntitiesInput: MessageEntitiesInput): MessageEntitiesOutput!
  chkUniqMessageByCode(input: ChkUniqMessageByCodeInput!): Boolean!
  messageGroupEntity(code: String!): MessageGroupEntityOutput!
  messageGroupEntities(paging: PagingInput, request: MessageGroupEntitiesInput): MessageGroupEntitiesOutput!
  frontComponentById(frontComponentId: String!): FrontComponentEntityOutput!
  allFrontComponentById(allFrontComponentId: String!): AllFrontComponentEntityOutput!
  allFrontComponentByAuth(frontComponentId: String!): AllFrontComponentEntityOutput
  icon(seqNo: Int!): IconOutput!
}

input PagingInput {
  skip: Int
  take: Int
}

input MenuEntitiesInput {
  search: MenuEntitiesSearchInput
  sort: MenuEntitiesSortInput
}

input MenuEntitiesSearchInput {
  seqNo: NonNullableNumberSearchInput
  name: NonNullableStringSearchInput
  iconSeqNo: NullableNumberSearchInput
  routeSeqNo: NullableNumberSearchInput
}

input NonNullableNumberSearchInput {
  equal: EqualNumberSearchInput
  any: NonNullableAnyNumberSearchInput
  in: NonNullableInNumberSearchInput
  lessThan: Int
  lessThanOrEqual: Int
  moreThan: Int
  moreThanOrEqual: Int
  between: BetweenNumberSearchInput
}

input EqualNumberSearchInput {
  value: Int!
  not: Boolean = false
}

input NonNullableAnyNumberSearchInput {
  value: [Int!]!
  not: Boolean = false
}

input NonNullableInNumberSearchInput {
  value: [Int!]!
  not: Boolean = false
}

input BetweenNumberSearchInput {
  from: Int!
  to: Int!
}

input NonNullableStringSearchInput {
  regex: RegexStringSearchInput = null
  like: LikeStringSearchInput = null
  equal: EqualStringSearchInput = null
  ilike: IlikeStringSearchInput = null
  any: NonNullableAnyStringSearchInput = null
  in: NonNullableInStringSearchInput = null
}

input RegexStringSearchInput {
  value: String!
  not: Boolean = false
}

input LikeStringSearchInput {
  value: String!
  not: Boolean = false
}

input EqualStringSearchInput {
  value: String!
  not: Boolean = false
}

input IlikeStringSearchInput {
  value: String!
  not: Boolean = false
}

input NonNullableAnyStringSearchInput {
  value: [String!]!
  not: Boolean = false
}

input NonNullableInStringSearchInput {
  value: [String!]!
  not: Boolean = false
}

input NullableNumberSearchInput {
  equal: EqualNumberSearchInput
  any: NullableAnyNumberSearchInput
  in: NullableInNumberSearchInput
  isNull: Boolean
  lessThan: Int
  lessThanOrEqual: Int
  moreThan: Int
  moreThanOrEqual: Int
  between: BetweenNumberSearchInput
}

input NullableAnyNumberSearchInput {
  value: [Int]!
  not: Boolean = false
}

input NullableInNumberSearchInput {
  value: [Int]!
  not: Boolean = false
}

input MenuEntitiesSortInput {
  seqNo: SortTypeInput
}

input SortTypeInput {
  sort: SortEnum!
  order: Int!
}

enum SortEnum {
  ASC
  DESC
}

input MenuRoleMapEntitiesInput {
  search: MenuRoleMapEntitiesSearchInput
  sort: MenuRoleMapEntitiesSortInput
}

input MenuRoleMapEntitiesSearchInput {
  seqNo: NonNullableNumberSearchInput
  roleSeqNo: NonNullableNumberSearchInput
  menuSeqNo: NonNullableNumberSearchInput
  orderNo: NonNullableNumberSearchInput
  parentSeqNo: NullableNumberSearchInput
  menu: MenuEntitiesSearchInput
}

input MenuRoleMapEntitiesSortInput {
  seqNo: SortTypeInput
  menuSeqNo: SortTypeInput
  roleSeqNo: SortTypeInput
  menu: MenuEntitiesSortInput
}

input RouteEntitiesInput {
  search: RouteEntitiesSearchInput
  sort: RouteEntitiesSortInput
}

input RouteEntitiesSearchInput {
  path: NonNullableStringSearchInput
  frontComponentId: NonNullableStringSearchInput
  parentSeqNo: NullableNumberSearchInput
}

input RouteEntitiesSortInput {
  seqNo: SortEnum
  code: SortEnum
  name: SortEnum
  text: SortEnum
  groupCode: SortEnum
}

input MessageEntitiesInput {
  search: MessageEntitiesSearchInput
  sort: MessageEntitiesSortInput
}

input MessageEntitiesSearchInput {
  seqNo: NonNullableNumberSearchInput
  groupsInput: MessageGroupEntitiesInput
  text: NonNullableStringSearchInput
}

input MessageGroupEntitiesInput {
  code: String
  codes: [String!]
  name: String
}

input MessageEntitiesSortInput {
  seqNo: SortTypeInput
  code: SortTypeInput
  name: SortTypeInput
  text: SortTypeInput
  groupCode: SortTypeInput
  desc: SortTypeInput
  createdAt: SortTypeInput
  updatedAt: SortTypeInput
}

input ChkUniqMessageByCodeInput {
  code: String!
  groupCode: String!
}

type Mutation {
  insertRole(insertRoleInput: InsertRoleEntityInput!): RoleEntityOutput!
  updateRole(updateRoleInput: UpdateRoleEntityInput!): RoleEntityOutput!
  insertRoleGroup(insertRoleGroupInput: InsertRoleGroupEntityInput!): RoleGroupEntityOutput!
  updateRoleGroup(updateRoleGroupInput: UpdateRoleGroupEntityInput!): RoleGroupEntityOutput!
  removeRoleGroup(seqNo: Int!): RoleGroupEntityOutput!
  updateMessageEntity(updateMessageEntityInput: UpdateMessageEntityInput!): MessageEntityOutput!
  insertMessageEntity(insertMessageEntityInput: InsertMessageEntityInput!): MessageEntityOutput!
  deleteMessageEntities(seqNos: [Int!]!): Boolean!
  deleteMessageEntity(seqNo: Int!): Boolean!
  updateMessageGroupEntity(updateMessageGroupEntityInput: UpdateMessageGroupEntityInput!): MessageGroupEntityOutput
  insertMessageGroupEntity(insertMessageGroupEntityInput: InsertMessageGroupEntityInput!): MessageGroupEntityOutput!
  insertFrontComponent(insertFrontComponentInput: InsertFrontComponentEntityInput!): FrontComponentEntityOutput!
  updateFrontComponent(updateFrontComponentInput: UpdateFrontComponentEntityInput!): FrontComponentEntityOutput!
  insertAllFrontComponent(insertAllFrontComponentInput: InsertAllFrontComponentEntityInput!): AllFrontComponentEntityOutput!
  updateAllFrontComponent(updateAllFrontComponentInput: UpdateAllFrontComponentEntityInput!): AllFrontComponentEntityOutput!
}

input InsertRoleEntityInput {
  name: String!
  identifier: String
  roleGroupSeqNo: Int
  userIds: String
  menuSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input UpdateRoleEntityInput {
  seqNo: Int!
  name: String
  roleGroupSeqNo: Int
  userIds: String
  menuSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input InsertRoleGroupEntityInput {
  name: String!
  parentSeqNo: Int
  roleSeqNos: [Int!]
  childSeqNos: [Int!]
}

input UpdateRoleGroupEntityInput {
  seqNo: Int!
  name: String
  parentSeqNo: Int
  roleSeqNos: [Int!]
  childSeqNos: [Int!]
}

input UpdateMessageEntityInput {
  seqNo: Float!
  code: String
  name: String
  text: String
  groupCode: String
}

input InsertMessageEntityInput {
  code: String!
  name: String!
  text: String!
  groupCode: String!
}

input UpdateMessageGroupEntityInput {
  code: String!
  name: String
  messageSeqNos: [Int!]
}

input InsertMessageGroupEntityInput {
  code: String!
  name: String!
  messageSeqNos: [Int!]
}

input InsertFrontComponentEntityInput {
  id: String!
  allFrontComponentIds: [String!]
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input UpdateFrontComponentEntityInput {
  id: String
  allFrontComponentIds: [String!]
  roleSeqNos: [Int!]
  routeSeqNos: [Int!]
}

input InsertAllFrontComponentEntityInput {
  id: String!
  frontComponentId: String
}

input UpdateAllFrontComponentEntityInput {
  id: String!
  frontComponentId: String
}